{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/juajxavier/upme/src/contexts/ChallengesContext.tsx\";\nimport { createContext, useState, useEffect } from \"react\";\nimport challenges from \"../../challenges.json\";\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrenceExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []); // array vazio = função dispara uma unica vez quando o componente aparecer em tela.\n\n  const percentToNextLevel = Math.round(currentExperience * 100) / experienceToNextLevel;\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length); //para disparar desafios aleatoriamente.\n\n    const challenge = challenges[randomChallengeIndex]; // challenge vai disparar a função random utilizando os dados do json challenges.\n\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience > experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrenceExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      experienceToNextLevel,\n      percentToNextLevel,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/juajxavier/upme/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrenceExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","percentToNextLevel","round","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,SAA7C,QAA8D,OAA9D;AAEA,OAAOC,UAAP,MAAuB,uBAAvB;AAyBA,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AACxE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACQ,iBAAD;AAAA,OAAoBC;AAApB,MAA6CT,QAAQ,CAAC,CAAD,CAA3D;AACA,QAAM;AAAA,OAACU,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDX,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACY,eAAD;AAAA,OAAkBC;AAAlB,MAAwCb,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMc,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,YAAY,CAACC,iBAAb;AACD,GAFQ,EAEN,EAFM,CAAT,CATwE,CAWhE;;AAER,QAAMC,kBAAkB,GACtBJ,IAAI,CAACK,KAAL,CAAWZ,iBAAiB,GAAG,GAA/B,IAAsCM,qBADxC;;AAGA,WAASO,OAAT,GAAmB;AACjBd,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASgB,iBAAT,GAA6B;AAC3B,UAAMC,oBAAoB,GAAGR,IAAI,CAACS,KAAL,CAAWT,IAAI,CAACU,MAAL,KAAgBvB,UAAU,CAACwB,MAAtC,CAA7B,CAD2B,CACiD;;AAC5E,UAAMC,SAAS,GAAGzB,UAAU,CAACqB,oBAAD,CAA5B,CAF2B,CAEyB;;AAEpDV,IAAAA,kBAAkB,CAACc,SAAD,CAAlB;AACD;;AAED,WAASC,cAAT,GAA0B;AACxBf,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,WAASgB,iBAAT,GAA6B;AAC3B,QAAI,CAACjB,eAAL,EAAsB;AACpB;AACD;;AAED,UAAM;AAAEkB,MAAAA;AAAF,QAAalB,eAAnB;AAEA,QAAImB,eAAe,GAAGvB,iBAAiB,GAAGsB,MAA1C;;AAEA,QAAIC,eAAe,GAAGjB,qBAAtB,EAA6C;AAC3CiB,MAAAA,eAAe,GAAGA,eAAe,GAAGjB,qBAApC;AACAO,MAAAA,OAAO;AACR;;AAEDZ,IAAAA,qBAAqB,CAACsB,eAAD,CAArB;AACAlB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,KADK;AAELE,MAAAA,iBAFK;AAGLE,MAAAA,mBAHK;AAILI,MAAAA,qBAJK;AAKLK,MAAAA,kBALK;AAMLE,MAAAA,OANK;AAOLC,MAAAA,iBAPK;AAQLV,MAAAA,eARK;AASLgB,MAAAA,cATK;AAULC,MAAAA;AAVK,KADT;AAAA,cAcGxB;AAdH;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from \"react\";\n\nimport challenges from \"../../challenges.json\";\n\ninterface Challenge {\n  type: \"body\" | \"eye\";\n  description: string;\n  amount: number;\n}\n\ninterface ChallengesContextData {\n  level: number;\n  currentExperience: number;\n  challengesCompleted: number;\n  experienceToNextLevel: number;\n  percentToNextLevel: number;\n  activeChallenge: Challenge;\n  levelUp: () => void;\n  startNewChallenge: () => void;\n  resetChallenge: () => void;\n  completeChallenge: () => void;\n}\n\ninterface ChallengesProviderProps {\n  children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\n  const [level, setLevel] = useState(1);\n  const [currentExperience, setCurrenceExperience] = useState(0);\n  const [challengesCompleted, setChallengesCompleted] = useState(0);\n\n  const [activeChallenge, setActiveChallenge] = useState(null);\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []); // array vazio = função dispara uma unica vez quando o componente aparecer em tela.\n\n  const percentToNextLevel =\n    Math.round(currentExperience * 100) / experienceToNextLevel;\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length); //para disparar desafios aleatoriamente.\n    const challenge = challenges[randomChallengeIndex]; // challenge vai disparar a função random utilizando os dados do json challenges.\n\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const { amount } = activeChallenge;\n\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience > experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrenceExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return (\n    <ChallengesContext.Provider\n      value={{\n        level,\n        currentExperience,\n        challengesCompleted,\n        experienceToNextLevel,\n        percentToNextLevel,\n        levelUp,\n        startNewChallenge,\n        activeChallenge,\n        resetChallenge,\n        completeChallenge,\n      }}\n    >\n      {children}\n    </ChallengesContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}