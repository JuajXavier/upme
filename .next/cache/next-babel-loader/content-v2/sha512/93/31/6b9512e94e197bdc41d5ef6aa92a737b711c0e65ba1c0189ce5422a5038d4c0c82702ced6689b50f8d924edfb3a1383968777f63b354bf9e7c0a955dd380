{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/juajxavier/upme/src/components/Countdown.tsx\";\nimport { useEffect } from \"react\";\nimport styles from \"../styles/components/Countdown.module.css\";\nlet countdownTimeout; // variável global do js\n\nexport function Countdown() {\n  // const { startNewChallenge } = useContext(ChallengesContext);\n\n  /* const [time, setTime] = useState(0.05 * 60); // 25 * 60 pra passar 25 minutos pra segundos.\n  const [isActive, setIsActive] = useState(false); // estado que armazena a atividade ou não do timer.\n  const [finished, setFinished] = useState(false);\n   const minutes = Math.floor(time / 60); // Math.floor para arredondar o número pra baixo, 24.3 pra 24, por exemplo.\n  const seconds = time % 60; // resto da divisão pra ver quantos segundos faltam. */\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, \"0\").split(\"\"); //padStart = se a string não tiver 2 caracteres, vai adicionar um 0 no início. Split('') para criar um array separando os números por espaço.\n\n  const [secondLeft, secondRight] = String(seconds).padStart(2, \"0\").split(\"\"); //minutos e segundso dividos entre esquerda e direita em [] = desestruturação js.\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout); // para cortar o timeout atual.\n\n    setIsActive(false);\n    setTime(25 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        // setTimeout = pra algo acontecer depois de x tempo.\n        setTime(time - 1);\n      }, 1000); // função executada depois de 1segundo.\n    } else if (isActive && time === 0) {\n      setFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]); // disparado quando o active for atualizado pelo valor armazenado em setActive e time em setTime.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), finished ?\n    /*#__PURE__*/\n    // \"finished && ()\" = if -> then, dessa forma faz uma condicional que pula o \"else\".\n    _jsxDEV(\"button\", {\n      disabled: true,\n      className: styles.countdownButton // Concatenando estilos.\n      ,\n      children: \"Ciclo finalizado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `${styles.countdownButton} ${styles.countdownButtonActive}` // Concatenando estilos.\n        ,\n        onClick: resetCountdown,\n        children: \"Abandonar ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: styles.countdownButton,\n        onClick: startCountdown,\n        children: \"Iniciar um ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/juajxavier/upme/src/components/Countdown.tsx"],"names":["useEffect","styles","countdownTimeout","Countdown","minuteLeft","minuteRight","String","minutes","padStart","split","secondLeft","secondRight","seconds","startCountdown","setIsActive","resetCountdown","clearTimeout","setTime","isActive","time","setTimeout","setFinished","startNewChallenge","countdownContainer","finished","countdownButton","countdownButtonActive"],"mappings":";;;AAAA,SAAmBA,SAAnB,QAAgD,OAAhD;AAEA,OAAOC,MAAP,MAAmB,2CAAnB;AAEA,IAAIC,gBAAJ,C,CAAsC;;AAEtC,OAAO,SAASC,SAAT,GAAqB;AAC1B;;AAEA;AACF;AACA;AACA;AACA;AAGE,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BC,MAAM,CAACC,OAAD,CAAN,CAAgBC,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAAlC,CAV0B,CAUoD;;AAC9E,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BL,MAAM,CAACM,OAAD,CAAN,CAAgBJ,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAAlC,CAX0B,CAWoD;;AAE9E,WAASI,cAAT,GAA0B;AACxBC,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASC,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAACd,gBAAD,CAAZ,CADwB,CACQ;;AAChCY,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAG,IAAAA,OAAO,CAAC,KAAK,EAAN,CAAP;AACD;;AAEDjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,QAAQ,IAAIC,IAAI,GAAG,CAAvB,EAA0B;AACxBjB,MAAAA,gBAAgB,GAAGkB,UAAU,CAAC,MAAM;AAClC;AACAH,QAAAA,OAAO,CAACE,IAAI,GAAG,CAAR,CAAP;AACD,OAH4B,EAG1B,IAH0B,CAA7B,CADwB,CAId;AACX,KALD,MAKO,IAAID,QAAQ,IAAIC,IAAI,KAAK,CAAzB,EAA4B;AACjCE,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAP,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAQ,MAAAA,iBAAiB;AAClB;AACF,GAXQ,EAWN,CAACJ,QAAD,EAAWC,IAAX,CAXM,CAAT,CAvB0B,CAkCJ;;AAEtB,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAElB,MAAM,CAACsB,kBAAvB;AAAA,8BACE;AAAA,gCACE;AAAA,oBAAOnB;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAA,gCACE;AAAA,oBAAOK;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAaGa,QAAQ;AAAA;AAAK;AACZ;AACE,MAAA,QAAQ,MADV;AAEE,MAAA,SAAS,EAAEvB,MAAM,CAACwB,eAFpB,CAEqC;AAFrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADO,gBAQP;AAAA,gBACGP,QAAQ,gBACP;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,SAAS,EAAG,GAAEjB,MAAM,CAACwB,eAAgB,IAAGxB,MAAM,CAACyB,qBAAsB,EAFvE,CAE0E;AAF1E;AAGE,QAAA,OAAO,EAAEX,cAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADO,gBASP;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,SAAS,EAAEd,MAAM,CAACwB,eAFpB;AAGE,QAAA,OAAO,EAAEZ,cAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVJ,qBArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4CD","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport { ChallengesContext } from \"../contexts/ChallengesContext\";\nimport styles from \"../styles/components/Countdown.module.css\";\n\nlet countdownTimeout: NodeJS.Timeout; // variável global do js\n\nexport function Countdown() {\n  // const { startNewChallenge } = useContext(ChallengesContext);\n\n  /* const [time, setTime] = useState(0.05 * 60); // 25 * 60 pra passar 25 minutos pra segundos.\n  const [isActive, setIsActive] = useState(false); // estado que armazena a atividade ou não do timer.\n  const [finished, setFinished] = useState(false);\n\n  const minutes = Math.floor(time / 60); // Math.floor para arredondar o número pra baixo, 24.3 pra 24, por exemplo.\n  const seconds = time % 60; // resto da divisão pra ver quantos segundos faltam. */\n\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, \"0\").split(\"\"); //padStart = se a string não tiver 2 caracteres, vai adicionar um 0 no início. Split('') para criar um array separando os números por espaço.\n  const [secondLeft, secondRight] = String(seconds).padStart(2, \"0\").split(\"\"); //minutos e segundso dividos entre esquerda e direita em [] = desestruturação js.\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout); // para cortar o timeout atual.\n    setIsActive(false);\n    setTime(25 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        // setTimeout = pra algo acontecer depois de x tempo.\n        setTime(time - 1);\n      }, 1000); // função executada depois de 1segundo.\n    } else if (isActive && time === 0) {\n      setFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]); // disparado quando o active for atualizado pelo valor armazenado em setActive e time em setTime.\n\n  return (\n    <div>\n      <div className={styles.countdownContainer}>\n        <div>\n          <span>{minuteLeft}</span>\n          <span>{minuteRight}</span>\n        </div>\n        <span>:</span>\n        <div>\n          <span>{secondLeft}</span>\n          <span>{secondRight}</span>\n        </div>\n      </div>\n\n      {finished ? ( // \"finished && ()\" = if -> then, dessa forma faz uma condicional que pula o \"else\".\n        <button\n          disabled\n          className={styles.countdownButton} // Concatenando estilos.\n        >\n          Ciclo finalizado\n        </button>\n      ) : (\n        <>\n          {isActive ? (\n            <button\n              type=\"button\"\n              className={`${styles.countdownButton} ${styles.countdownButtonActive}`} // Concatenando estilos.\n              onClick={resetCountdown}\n            >\n              Abandonar ciclo\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className={styles.countdownButton}\n              onClick={startCountdown}\n            >\n              Iniciar um ciclo\n            </button>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}