{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/juajxavier/upme/src/components/Countdown.tsx\";\nimport { useState, useEffect } from 'react';\nimport styles from '../styles/components/Countdown.module.css';\nexport function Countdown() {\n  const {\n    0: time,\n    1: setTime\n  } = useState(25 * 60); // 25 * 60 pra passar 25 minutos pra segundos.\n\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false); // estado que armazena a atividade ou não do timer.\n\n  const minutes = Math.floor(time / 60); // Math.floor para arredondar o número pra baixo, 24.3 pra 24, por exemplo.\n\n  const seconds = time % 60; // resto da divisão pra ver quantos segundos faltam.\n\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split(''); //padStart = se a string não tiver 2 caracteres, vai adicionar um 0 no início. Split('') para criar um array separando os números por espaço.\n\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split(''); //minutos e segundso dividos entre esquerda e direita em [] = desestruturação js.\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      setTimeout(() => {\n        // setTimeout = pra algo acontecer depois de x tempo.\n        setTime(time - 1);\n      }, 1000); // função executada depois de 1segundo.\n    }\n  }, [isActive, time]); // disparado quando o active for atualizado pelo valor armazenado em setActive e time em setTime.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), isActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: `${styles.countdownButton} ${styles.countdownButtonActive}`,\n      onClick: startCountdown,\n      children: \"Abandonar ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: styles.countdownButton,\n      onClick: startCountdown,\n      children: \"Iniciar um ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/juajxavier/upme/src/components/Countdown.tsx"],"names":["useState","useEffect","styles","Countdown","time","setTime","isActive","setIsActive","minutes","Math","floor","seconds","minuteLeft","minuteRight","String","padStart","split","secondLeft","secondRight","startCountdown","setTimeout","countdownContainer","countdownButton","countdownButtonActive"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,2CAAnB;AAEA,OAAO,SAASC,SAAT,GAAqB;AACxB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBL,QAAQ,CAAC,KAAK,EAAN,CAAhC,CADwB,CACmB;;AAC3C,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,CAAC,KAAD,CAAxC,CAFwB,CAEyB;;AAEjD,QAAMQ,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAI,GAAC,EAAhB,CAAhB,CAJwB,CAIa;;AACrC,QAAMO,OAAO,GAAGP,IAAI,GAAG,EAAvB,CALwB,CAKE;;AAE1B,QAAM,CAACQ,UAAD,EAAaC,WAAb,IAA4BC,MAAM,CAACN,OAAD,CAAN,CAAgBO,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAAlC,CAPwB,CAOsD;;AAC9E,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BJ,MAAM,CAACH,OAAD,CAAN,CAAgBI,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAAlC,CARwB,CAQsD;;AAE9E,WAASG,cAAT,GAA0B;AACtBZ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAEDN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACtBgB,MAAAA,UAAU,CAAC,MAAM;AAAE;AACff,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAFS,EAEP,IAFO,CAAV,CADsB,CAGb;AACZ;AACJ,GANQ,EAMN,CAACE,QAAD,EAAWF,IAAX,CANM,CAAT,CAdwB,CAoBH;;AAErB,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEF,MAAM,CAACmB,kBAAvB;AAAA,8BACI;AAAA,gCACI;AAAA,oBAAOT;AAAP;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA,gCACI;AAAA,oBAAOI;AAAP;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAaMZ,QAAQ,gBACN;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,SAAS,EAAG,GAAEJ,MAAM,CAACoB,eAAgB,IAAGpB,MAAM,CAACqB,qBAAsB,EAFzE;AAGI,MAAA,OAAO,EAAEJ,cAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADM,gBAUN;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,SAAS,EAAEjB,MAAM,CAACoB,eAFtB;AAGI,MAAA,OAAO,EAAEH,cAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH","sourcesContent":["import { useState, useEffect } from 'react';\nimport styles from '../styles/components/Countdown.module.css';\n\nexport function Countdown() {\n    const [time, setTime] = useState(25 * 60); // 25 * 60 pra passar 25 minutos pra segundos.\n    const [isActive, setIsActive] = useState(false); // estado que armazena a atividade ou não do timer.\n\n    const minutes = Math.floor(time/60); // Math.floor para arredondar o número pra baixo, 24.3 pra 24, por exemplo.\n    const seconds = time % 60 // resto da divisão pra ver quantos segundos faltam.\n\n    const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split(''); //padStart = se a string não tiver 2 caracteres, vai adicionar um 0 no início. Split('') para criar um array separando os números por espaço.\n    const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split(''); //minutos e segundso dividos entre esquerda e direita em [] = desestruturação js.\n\n    function startCountdown() {\n        setIsActive(true);\n    }\n\n    useEffect(() => {\n        if (isActive && time > 0) {\n            setTimeout(() => { // setTimeout = pra algo acontecer depois de x tempo.\n                setTime(time - 1)\n            }, 1000) // função executada depois de 1segundo.\n        }\n    }, [isActive, time]) // disparado quando o active for atualizado pelo valor armazenado em setActive e time em setTime.\n\n    return (\n        <div>\n            <div className={styles.countdownContainer}>\n                <div>\n                    <span>{minuteLeft}</span>\n                    <span>{minuteRight}</span>\n                </div>\n                <span>:</span>\n                <div>\n                    <span>{secondLeft}</span>\n                    <span>{secondRight}</span>\n                </div>\n            </div>\n\n            { isActive ? (\n                <button \n                    type=\"button\" \n                    className={`${styles.countdownButton} ${styles.countdownButtonActive}`}\n                    onClick={startCountdown}\n                >\n                    Abandonar ciclo\n                </button>\n\n            ) : (\n                <button \n                    type=\"button\" \n                    className={styles.countdownButton}\n                    onClick={startCountdown}\n                >\n                    Iniciar um ciclo\n                </button>\n            ) }\n           \n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}